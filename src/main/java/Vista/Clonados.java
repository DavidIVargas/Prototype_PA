/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vista;

import java.awt.Image;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;

import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.plaf.DesktopPaneUI;
import javax.swing.table.DefaultTableModel;
import modelo.Guerrero;
import modelo.Mago;
import modelo.Personaje;

/**
 *
 * @author Usuario
 */
public class Clonados extends javax.swing.JInternalFrame {

    private Clonados clonados;
    private Personajes personajes;
    private Personaje personaje;
    private List<Mago> listaMago = new ArrayList<>();
    private List<Guerrero> listaGuerrero = new ArrayList<>();

    /**
     * Creates new form Clonados
     */
    public Clonados(Personajes personajes) {
        initComponents();
        // En el constructor de tu clase Clonados, despu√©s de initComponents()
        jListImagenes.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    String opcionSeleccionada = jListImagenes.getSelectedValue();
                    String rutaImagen;
                    if (ComboBoxPersonajes.getSelectedItem().equals("Guerreros")) {
                        rutaImagen = obtenerRutaImagenGuerrero(opcionSeleccionada);
                    } else {
                        rutaImagen = obtenerRutaImagenMago(opcionSeleccionada);
                    }
                    ImageIcon nuevaImagenIcon = new ImageIcon(getClass().getResource(rutaImagen));
                    jLabelImagen.setIcon(new ImageIcon(nuevaImagenIcon.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT)));
                }
            }
        });
        this.personajes = personajes;
        this.mostrarComponentes(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ComboBoxPersonajes = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnMostrar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jLabelImagen = new javax.swing.JLabel();
        xtxNuevoNombre = new javax.swing.JTextField();
        txtNuevaHabilidad = new javax.swing.JTextField();
        txtNuevoEquipo = new javax.swing.JTextField();
        txtFuerza_Encanto = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListImagenes = new javax.swing.JList<>();
        btnGuardarr = new javax.swing.JButton();
        jLabelNuevoNombre = new javax.swing.JLabel();
        jLNuevaHabilidad = new javax.swing.JLabel();
        jLNuevoEquipo = new javax.swing.JLabel();
        jLFuerza_Encanto = new javax.swing.JLabel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        ComboBoxPersonajes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Personajes", "Guerreros", "Magos" }));
        ComboBoxPersonajes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxPersonajesActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Encanto/Fuerza", "Nombre", "Habilidad", "Equipo"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnMostrar.setText("Mostrar");
        btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jListImagenes.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Imagen1", "Imagen2", "Imagen3", " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jListImagenes);

        btnGuardarr.setText("Guardar");
        btnGuardarr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarrActionPerformed(evt);
            }
        });

        jLabelNuevoNombre.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 14)); // NOI18N
        jLabelNuevoNombre.setText("Nuevo Nombre:");

        jLNuevaHabilidad.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 14)); // NOI18N
        jLNuevaHabilidad.setText("Nueva Habilidad:");

        jLNuevoEquipo.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 14)); // NOI18N
        jLNuevoEquipo.setText("Nuevo Equipo:");

        jLFuerza_Encanto.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 14)); // NOI18N
        jLFuerza_Encanto.setText("Fuerza/Encanto:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(btnMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBoxPersonajes, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(xtxNuevoNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                                .addComponent(txtNuevoEquipo))
                            .addComponent(jLabelNuevoNombre)
                            .addComponent(jLNuevoEquipo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 225, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtNuevaHabilidad, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                                .addComponent(txtFuerza_Encanto))
                            .addComponent(jLNuevaHabilidad)
                            .addComponent(jLFuerza_Encanto))
                        .addGap(51, 51, 51))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGuardarr, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(124, 124, 124))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(ComboBoxPersonajes, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelNuevoNombre)
                                    .addComponent(jLNuevaHabilidad))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(xtxNuevoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNuevaHabilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLNuevoEquipo)
                                    .addComponent(jLFuerza_Encanto))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtNuevoEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFuerza_Encanto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, Short.MAX_VALUE)
                                .addComponent(btnGuardarr, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(12, 12, 12)))
                .addContainerGap(229, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        eliminarPersonaje();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarActionPerformed
        int indiceSeleccionado = jTable1.getSelectedRow();

        if (indiceSeleccionado != -1) {
            Personaje personajeSeleccionado = personajes.getListaPersonajesClonados().get(indiceSeleccionado);
            mostrarImagen(personajeSeleccionado);
            actualizarTabla(true);
            String opcionSeleccionada = ComboBoxPersonajes.getSelectedItem().toString();
            if (opcionSeleccionada.equals("Guerreros")) {
                ImageIcon guerrero = new ImageIcon(getClass().getResource("/images/img_guerrero_1.jpeg"));
                ImageIcon icon = new ImageIcon(guerrero.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
                jLabelImagen.setIcon(icon);

                // Actualizar la tabla con los datos de los guerreros
                actualizarTablaGuerreros();
            } else if (opcionSeleccionada.equals("Magos")) {
                ImageIcon mago = new ImageIcon(getClass().getResource("/images/img_mago_1.jpeg"));
                ImageIcon icon2 = new ImageIcon(mago.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
                jLabelImagen.setIcon(icon2);
                // Actualizar la tabla con los datos de los magos
                actualizarTabla(true);
                actualizarTablaMagos();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un personaje de la tabla", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnMostrarActionPerformed

    private void ComboBoxPersonajesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxPersonajesActionPerformed

        String opcionSeleccionada = ComboBoxPersonajes.getSelectedItem().toString();

        if (opcionSeleccionada.equals("Guerreros")) {
            actualizarTablaGuerreros();
        } else if (opcionSeleccionada.equals("Magos")) {
            actualizarTablaMagos();
        }

        jLabelImagen.setIcon(null);
    }//GEN-LAST:event_ComboBoxPersonajesActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed

        int indiceSeleccionado = jTable1.getSelectedRow();
        if (indiceSeleccionado != -1) {
            mostrarComponentes(true);
            // Obtener el personaje clonado seleccionado
            Personaje personajeSeleccionado = personajes.getListaPersonajesClonados().get(indiceSeleccionado);
            // Mostrar los datos del personaje seleccionado en los campos correspondientes
            xtxNuevoNombre.setText(personajeSeleccionado.getNombre());
            txtNuevaHabilidad.setText(personajeSeleccionado.getHabilidad());
            txtNuevoEquipo.setText(personajeSeleccionado.getEquipo());
            // Si es un Guerrero o un Mago, mostrar la fuerza o el encanto
            if (personajeSeleccionado instanceof Guerrero) {
                jLFuerza_Encanto.setText("Fuerza:");
                txtFuerza_Encanto.setText(String.valueOf(((Guerrero) personajeSeleccionado).getFuerza()));
            } else if (personajeSeleccionado instanceof Mago) {
                jLFuerza_Encanto.setText("Encanto:");
                txtFuerza_Encanto.setText(((Mago) personajeSeleccionado).getEncanto());
            }
            // Agregar im√°genes disponibles al JList
            DefaultListModel<String> model = new DefaultListModel<>();
            model.addElement("Imagen1");
            model.addElement("Imagen2");
            model.addElement("Imagen3");
            jListImagenes.setModel(model);
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un personaje de la tabla", "Error", JOptionPane.ERROR_MESSAGE);
            limpiarCampos();
        }

    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnGuardarrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarrActionPerformed
        if (jListImagenes.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this, "Seleccione una imagen", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int indiceSeleccionado = jTable1.getSelectedRow();
        if (indiceSeleccionado != -1) {
            // Obt√©n el objeto del personaje seleccionado
            Personaje personajeClonado = personajes.getListaPersonajesClonados().get(indiceSeleccionado);
            String opcion = jListImagenes.getSelectedValue();

            // Guarda la nueva imagen en el objeto del personaje
            if (personajeClonado instanceof Guerrero) {
                String nuevaImagen = obtenerRutaImagenGuerrero(opcion);
                personajeClonado.setImagen(nuevaImagen);
            } else if (personajeClonado instanceof Mago) {
                String nuevaImagenMago = obtenerRutaImagenMago(opcion);
                personajeClonado.setImagen(nuevaImagenMago);
            }

            // Actualiza los datos del personaje en el objeto
            personajeClonado.setNombre(xtxNuevoNombre.getText());
            personajeClonado.setHabilidad(txtNuevaHabilidad.getText());
            personajeClonado.setEquipo(txtNuevoEquipo.getText());

            // Si es un Guerrero, actualiza la fuerza si se ingres√≥ un nuevo valor
            if (personajeClonado instanceof Guerrero && !txtFuerza_Encanto.getText().isEmpty()) {
                ((Guerrero) personajeClonado).setFuerza(Integer.parseInt(txtFuerza_Encanto.getText()));
            } else if (personajeClonado instanceof Mago) {
                ((Mago) personajeClonado).setEncanto(txtFuerza_Encanto.getText());
            }

            // Actualiza los datos del personaje en la tabla
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            modelo.setValueAt(xtxNuevoNombre.getText(), indiceSeleccionado, 0);
            modelo.setValueAt(txtNuevaHabilidad.getText(), indiceSeleccionado, 1);
            modelo.setValueAt(txtNuevoEquipo.getText(), indiceSeleccionado, 2);
            jTable1.setModel(modelo);

            // Limpia los campos y oculta componentes despu√©s de guardar
            limpiarCampos();
            mostrarComponentes(true);

            // Muestra un mensaje de √©xito
            JOptionPane.showMessageDialog(this, "Los cambios se han guardado exitosamente", "√âxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un personaje de la tabla", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGuardarrActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxPersonajes;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardarr;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JLabel jLFuerza_Encanto;
    private javax.swing.JLabel jLNuevaHabilidad;
    private javax.swing.JLabel jLNuevoEquipo;
    private javax.swing.JLabel jLabelImagen;
    private javax.swing.JLabel jLabelNuevoNombre;
    private javax.swing.JList<String> jListImagenes;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtFuerza_Encanto;
    private javax.swing.JTextField txtNuevaHabilidad;
    private javax.swing.JTextField txtNuevoEquipo;
    private javax.swing.JTextField xtxNuevoNombre;
    // End of variables declaration//GEN-END:variables

    private void eliminarPersonaje() {
        int indiceSeleccionado = jTable1.getSelectedRow();

        if (indiceSeleccionado != -1) {
            Personaje personajeClonado = personajes.getListaPersonajesClonados().get(indiceSeleccionado);
            int confirmacion = JOptionPane.showConfirmDialog(this, "¬øSeguro que deseas eliminar este personaje clonado?", "Confirmar Eliminaci√≥n", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                personajes.getListaPersonajesClonados().remove(personajeClonado);

            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un personaje clonado para eliminar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void mostrarComponentes(Boolean co) {
        xtxNuevoNombre.setVisible(co);

        txtNuevaHabilidad.setVisible(co);
        txtNuevoEquipo.setVisible(co);
        txtFuerza_Encanto.setVisible(co);
        jLabelNuevoNombre.setVisible(co);
        jLNuevaHabilidad.setVisible(co);
        jLNuevoEquipo.setVisible(co);
        jLFuerza_Encanto.setVisible(co);
        jListImagenes.setVisible(co);
        btnGuardarr.setVisible(co);
    }

    /*
    private void modificarPersonaje() {
        int indiceSeleccionado = jTable1.getSelectedRow();
        if (indiceSeleccionado != -1) {
            // Obtener el personaje clonado seleccionado
            Personaje personajeClonado = personajes.getListaPersonajesClonados().get(indiceSeleccionado);
            // Actualizar los datos del personaje clonado seg√∫n el tipo (Guerrero o Mago)
            if (personajeClonado instanceof Guerrero) {
                personajeClonado.setNombre(xtxNuevoNombre.getText());
                personajeClonado.setHabilidad(txtNuevaHabilidad.getText());
                personajeClonado.setEquipo(txtNuevoEquipo.getText());
                ((Guerrero) personajeClonado).setFuerza(Integer.parseInt(txtFuerza_Encanto.getText()));
            } else if (personajeClonado instanceof Mago) {
                personajeClonado.setNombre(xtxNuevoNombre.getText());
                personajeClonado.setHabilidad(txtNuevaHabilidad.getText());
                personajeClonado.setEquipo(txtNuevoEquipo.getText());
                ((Mago) personajeClonado).setEncanto(txtFuerza_Encanto.getText());
            }
            // Actualizar la tabla con los datos modificados
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            modelo.setValueAt(personajeClonado.getNombre(), indiceSeleccionado, 0);
            modelo.setValueAt(personajeClonado.getHabilidad(), indiceSeleccionado, 1);
            modelo.setValueAt(personajeClonado.getEquipo(), indiceSeleccionado, 2);
            jTable1.setModel(modelo);
            // Ocultar los componentes de modificaci√≥n despu√©s de guardar
            mostrarComponentes(false);
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un personaje de la tabla", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }*/
    private String obtenerRutaImagenGuerrero(String opcion) {
        switch (opcion) {
            case "Imagen1":
                return "/images/img_guerrero_2.jpeg";
            case "Imagen2":
                return "/images/img_guerrero_3.jpeg";
            case "Imagen3":
                return "/images/img_guerrero_4.jpeg";
            default:
                return ""; // Devolver una ruta vac√≠a si no se selecciona ninguna imagen
        }
    }

    private String obtenerRutaImagenMago(String opcion) {
        switch (opcion) {
            case "Imagen1":
                return "/images/img_mago_2.jpeg";
            case "Imagen2":
                return "/images/img_mago_3.jpeg";
            case "Imagen3":
                return "/images/img_mago_4.jpeg";
            default:
                return ""; // Devolver una ruta vac√≠a si no se selecciona ninguna imagen
        }
    }

    public void agregarPersonajeClonado(Personaje personajeClonado) {
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        // Agregamos una fila al modelo de tabla
        modelo.addRow(new Object[]{personajeClonado.getNombre(), personajeClonado.getHabilidad(), personajeClonado.getEquipo()});
        jTable1.setModel(modelo);
    }

    private void mostrarImagen(Personaje personajeSeleccionado) {
        if (personajeSeleccionado != null) {
            String rutaImagen = personajeSeleccionado.getImagen(); // Obtener la ruta de la imagen del personaje
            ImageIcon icono = new ImageIcon(getClass().getResource(rutaImagen));
            if (icono != null) {
                ImageIcon guerrero = new ImageIcon(getClass().getResource("/images/img_guerrero_1.jpeg"));
                ImageIcon icon = new ImageIcon(guerrero.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
                jLabelImagen.setIcon(icon);
                ImageIcon mago = new ImageIcon(getClass().getResource("/images/img_mago_1.jpeg"));
                ImageIcon icon2 = new ImageIcon(mago.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
                jLabelImagen.setIcon(icon2);

            } else {
                jLabelImagen.setIcon(null); // Si la imagen no se encuentra, establecer el icono a null
            }
        } else {
            jLabelImagen.setIcon(null); // Si no se selecciona ning√∫n personaje, establecer el icono a null
        }
    }

    /*
    private void actualizarTabla(boolean mostrarGuerreros) {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Nombre");
        modelo.addColumn("Habilidad");
        modelo.addColumn("Equipo");
        modelo.addColumn(mostrarGuerreros ? "Fuerza" : "Encanto");

        List<Personaje> listaPersonajesClonados = personajes.getListaPersonajesClonados();

        for (Personaje personajeClonado : listaPersonajesClonados) {
            if ((mostrarGuerreros && personajeClonado instanceof Guerrero)
                    || (!mostrarGuerreros && personajeClonado instanceof Mago)) {
                Object[] rowData = {
                    personajeClonado.getNombre(),
                    personajeClonado.getHabilidad(),
                    personajeClonado.getEquipo(),
                    mostrarGuerreros ? ((Guerrero) personajeClonado).getFuerza() : ((Mago) personajeClonado).getEncanto()
                };
                modelo.addRow(rowData);
            }
        }

        jTable1.setModel(modelo);
    }
     */
// Llamada para mostrar los guerreros
    private void actualizarTablaGuerreros() {
        actualizarTabla(true);
    }

// Llamada para mostrar los magos
    private void actualizarTablaMagos() {
        actualizarTabla(false);
    }

    private void limpiarCampos() {
        xtxNuevoNombre.setText("");
        txtNuevaHabilidad.setText("");
        txtNuevoEquipo.setText("");
        txtFuerza_Encanto.setText("");
    }

    private void modificarPersonaje() {
        int indiceSeleccionado = jTable1.getSelectedRow();

        if (indiceSeleccionado != -1) {
            Personaje personajeClonado = personajes.getListaPersonajesClonados().get(indiceSeleccionado);
            String opcion = jListImagenes.getSelectedValue();
            if (personajeClonado instanceof Guerrero) {
                String nuevaImagen = obtenerRutaImagenGuerrero(opcion);
                personajeClonado.setImagen(nuevaImagen);
            } else if (personajeClonado instanceof Mago) {
                String nuevaImagen = obtenerRutaImagenMago(opcion);
                personajeClonado.setImagen(nuevaImagen);
            }
            // Verificar si el personaje es un Guerrero
            if (personajeClonado instanceof Guerrero) {
                Guerrero guerrero = (Guerrero) personajeClonado;
                guerrero.setNombre(xtxNuevoNombre.getText());
                guerrero.setEquipo(txtNuevaHabilidad.getText());
                guerrero.setHabilidad(txtNuevoEquipo.getText());
                // Convertir el texto de fuerza a entero solo si no est√° vac√≠o
                if (!txtFuerza_Encanto.getText().isEmpty()) {
                    guerrero.setFuerza(Integer.parseInt(txtFuerza_Encanto.getText()));
                }

                // Actualizar la imagen del guerrero seg√∫n la selecci√≥n en el JList
                String nuevaImagen = obtenerRutaImagenGuerrero(opcion);
                personajeClonado.setImagen(nuevaImagen);

                // Mostrar la imagen del guerrero actualizada
                ImageIcon guerreroIcon = new ImageIcon(getClass().getResource(nuevaImagen));
                jLabelImagen.setIcon(new ImageIcon(guerreroIcon.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT)));
            } // Verificar si el personaje es un Mago
            else if (personajeClonado instanceof Mago) {
                Mago mago = (Mago) personajeClonado;
                mago.setNombre(xtxNuevoNombre.getText());
                mago.setEquipo(txtNuevaHabilidad.getText());
                mago.setHabilidad(txtNuevoEquipo.getText());

                // Actualizar la imagen del mago seg√∫n la selecci√≥n en el JList
                String nuevaImagen = obtenerRutaImagenMago(opcion);
                personajeClonado.setImagen(nuevaImagen);

                // Mostrar la imagen del mago actualizada
                ImageIcon magoIcon = new ImageIcon(getClass().getResource(nuevaImagen));
                jLabelImagen.setIcon(new ImageIcon(magoIcon.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT)));
            }
        }
    }

    private void actualizarTabla(boolean mostrarGuerreros) {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Nombre");
        modelo.addColumn("Habilidad");
        modelo.addColumn("Equipo");
        modelo.addColumn(mostrarGuerreros ? "Fuerza" : "Encanto");

        List<Personaje> listaPersonajesClonados = personajes.getListaPersonajesClonados();

        for (Personaje personajeClonado : listaPersonajesClonados) {
            if ((mostrarGuerreros && personajeClonado instanceof Guerrero)
                    || (!mostrarGuerreros && personajeClonado instanceof Mago)) {
                Object[] rowData = {
                    personajeClonado.getNombre(),
                    personajeClonado.getHabilidad(),
                    personajeClonado.getEquipo(),
                    mostrarGuerreros ? ((Guerrero) personajeClonado).getFuerza() : ((Mago) personajeClonado).getEncanto()
                };
                modelo.addRow(rowData);
            }
        }

        jTable1.setModel(modelo);
    }
}
